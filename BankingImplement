package padhobanking;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;

public class BankingImplement {
	Scanner input = new Scanner(System.in);
	BankingImplement ObjectIO = new BankingImplement();
	TreeMap<Long, Customer>	map1 = new TreeMap<>();
	DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");  
	LocalDate now = LocalDate.now();  
	String today = dtf.format(now);
	
	public BankingImplement() {
	        try {
	            FileInputStream fileIn = new FileInputStream("F:\\Nihas\\PadhohBanking\\Customer.txt");
	            while (fileIn.available() != 0) {
		            ObjectInputStream objectIn = new ObjectInputStream(fileIn);
	                Customer c = (Customer) objectIn.readObject();
	               
	                 if (c != null)
	                 {
	                	 map1.put(c.getCustomernumber(), c);
	                 }
	            }
	            fileIn.close();
	        	}
	        catch (Exception ex) {
	            ex.printStackTrace();
	        }
	}

	public void SaveMap() throws FileNotFoundException
	{
        FileOutputStream fileOut = new FileOutputStream("F:\\Nihas\\PadhohBanking\\Customer.txt");
		Set<Long> cKeys = map1.keySet();
		Iterator<Long> it = cKeys.iterator();
		Long l=null;
		while(it.hasNext())
		{
			l=it.next();
			WriteObjectToFile(map1.get(l));
			
		}
	}

	
	public void WriteObjectToFile(Object serObj) {
		 
        try {
 
            FileOutputStream fileOut = new FileOutputStream("F:\\Nihas\\PadhohBanking\\Customer.txt",true);
            ObjectOutputStream objectOut = new ObjectOutputStream(fileOut);
            objectOut.writeObject(serObj);
            objectOut.close();
 
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
	
	public static boolean isValidDate(String DOB)
    {
	 try
	 {
	 String s = DOB;
	  SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	  sdf.setLenient(false);
	  Date d = (Date) sdf.parse(s);
	  Calendar c = Calendar.getInstance();
	  c.setTime(d);
	  int year = c.get(Calendar.YEAR);
	  int month = c.get(Calendar.MONTH) + 1;
	  int date = c.get(Calendar.DATE);
	  LocalDate l1 = LocalDate.of(year, month, date);
	  LocalDate now1 = LocalDate.now();
	  Period diff1 = Period.between(l1, now1);
	  int age=diff1.getYears();
	  if(age>18&&age<100){
		  return true;
	  }else{
		  System.out.println("INVALID AGE PLEASE TRY AGAIN");
		  return false;
	  }
	 }
	 catch (Exception e)
	 {
		 System.out.println("Please enter date in DD/MM/YYYY format");
		 return false;
	 }
    }
	 
	 public boolean isValidAdhar(String adharnumber){
              if(adharnumber.matches("[0-9]+")){ 
            	    if(adharnumber.length()<=12){
            	    	return true;
            	    }
            	  
              }
			return false;
              }
	 
	public  boolean isValidName(String name){
		if(name.matches("a-zA-Z+")){                              
			return true;
		}
		else 
		return false;
	}
	
	public boolean isValidNumber(long adharnumber){
		String s =Long.toString(adharnumber);   
		if(s.length()<=15){
			
		}
		return true;
	}
	
	
	
	public void createCID() throws ParseException{
	        Customer c1 =new  Customer();
		    System.out.print("Enter Customer Name : "  );
		    String Name=input.next();
		    boolean names=isValidName(Name);
		    if(names){
		    	c1.setCustomername(Name);
		    }else{
		    	while(!names)
		    		System.err.println("INVALID NAME");
		    	Name=input.next();
		    	names=isValidName(Name);
		    }
		    		    
		    System.out.print("Customer DOB : ");
		    String DOB=input.next();
		    boolean value = isValidDate(DOB);
		    if(value){
		    	c1.setDob(DOB);
		    }else{
		   while(!value){
			   System.out.println("Inavlid pleas enter again");
			   DOB=input.next();
			   value = isValidDate(DOB);
		   }
		    
		    System.out.println("Customer Address : "+input.next());
			System.out.println("KYC Enabled : "+input.next());
			System.out.print("Customer Aadhar Number : ");
            String adharnumber=input.next();
            isValidAdhar(adharnumber);
            boolean values=isValidAdhar(adharnumber);
            if(values){
            	c1.setAadharnumber(adharnumber);	
            }else{
            	while(!values){
            		System.err.println("INVALID AADHARNUMBER");
            		adharnumber=input.next();
            		isValidAdhar(adharnumber);
            		
            	}
            }
		    }
		    map1.put(c1.getCustomernumber(), c1);

	}
}


/*
--------------------------------------------------------------------------------------------------------
package file;
public class MaskAccountNumber {
	
	public void pass(){
	String acc="50010101012042510";
	int i=0;
	StringBuffer temp =new StringBuffer();
	while(i<(acc.length()))
	{
		if(i>acc.length()-5)
		{
			temp.append(acc.charAt(i));
		}
		else
		{
			temp.append("X");
		}
		i++;
		}
    System.out.println(temp); 
}

}



OUTPUT:
XXXXXXXXXXXXX2510
*/
